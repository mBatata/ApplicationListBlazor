@if (IsEditable)
{
    if (!string.IsNullOrWhiteSpace(LabelText))
    {
        <label for=@Id>@LabelText: </label>
    }
    
    switch (Type.GetTypeCode(typeof(TInput)))
    {
        default:
            <input id=@Id type="text" @bind-value=@Value />
            break;
    }
}
else
{
    <p>
        @if (!string.IsNullOrWhiteSpace(LabelText))
        {
            <b>@LabelText:</b>
        }

        @Value
    </p>
}

@typeparam TInput
@code {
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public bool IsEditable { get; set; }

    [Parameter]
    public string? LabelText { get; set; }

    [Parameter]
    public TInput Value
    {
        get => _value;
        set
        {
            if (!EqualityComparer<TInput>.Default.Equals(_value, value))
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<TInput> ValueChanged { get; set; }

    TInput _value = default!;
}