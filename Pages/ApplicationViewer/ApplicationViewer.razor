@page "/application-viewer"
@using System.Web;

@if (Application == null)
{
    <label>Application not found. <a class="btn btn-link" @onclick=OnBack>Click here</a> to go back.</label>
    return;
}

@if (ComponentMode == ComponentMode.Edit)
{
    <ApplicationViewerEditMode  Application=Application 
                                ApplicationStatuses=ApplicationStatuses
                                GoBackClick=OnBack
                                CancelClick=@(() => ChangeMode(ComponentMode.View))
                                SaveClick=OnSave />
}
else
{
    <ApplicationViewerViewMode  Application=Application
                                ApplicationStatuses=ApplicationStatuses
                                GoBackClick=OnBack
                                EditClick=@(() => ChangeMode(ComponentMode.Edit)) />
}

@code {
    [Inject]
    NavigationManager NavigationManager { get; init; } = default!;

    [Inject]
    ApplicationService ApplicationService { get; init; } = default!;

    ApplicationDto? Application { get; set; }

    IDictionary<string, string> ApplicationStatuses { get; set; } = default!;

    ComponentMode ComponentMode { get; set; } = ComponentMode.View;

    protected override void OnInitialized()
    {
        var applicationId = GetApplicationId();
        Application = ApplicationService.GetApplications().FirstOrDefault(x => x.Id == applicationId);
        ApplicationStatuses = EnumHelper.GetApplicationStatuses();
    }

    void OnBack() => NavigationManager.NavigateTo("applications-listing");

    void OnSave()
    {
        Application = ApplicationService.UpdateApplication(Application!);
        ChangeMode(ComponentMode.View);
    }

    Guid GetApplicationId()
    {
        var queryStrings= HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
        return Guid.TryParse(queryStrings["Id"], out var id) ? id : Guid.Empty;
    }

    void ChangeMode(ComponentMode componentMode)
    {
        ComponentMode = componentMode;
        StateHasChanged();
    }
}

